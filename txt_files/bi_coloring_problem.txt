10. To Study Bi-coloring problem.
-----------------------------------------
from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def is_bicolorable(self):
        def dfs(vertex, color):
            visited[vertex] = True
            colors[vertex] = color

            for neighbor in self.graph[vertex]:
                if not visited[neighbor]:
                    if not dfs(neighbor, 1 - color):
                        return False
                elif colors[neighbor] == color:
                    return False

            return True

        num_vertices = len(self.graph)
        visited = [False] * num_vertices
        colors = [-1] * num_vertices

        for vertex in range(num_vertices):
            if not visited[vertex]:
                if not dfs(vertex, 0):
                    return False

        return True

# Example usage:
if __name__ == "__main__":
    g = Graph()
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 3)
    g.add_edge(2, 3)

    if g.is_bicolorable():
        print("Graph is bi-colorable.")
    else:
        print("Graph is not bi-colorable.")
